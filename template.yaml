---
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: This stack deploys a GraphQL API for the OAG Flight Schedule data on a Snowflake cluster

Parameters:

  Prefix:
    Type: String
    Description: Prefix for resources
    
  SnowflakeAccount:
    Type: String
    Description: Snowflake account identifier

  SnowflakeUser:
    Type: String
    Description: Username for the Snowflake account 

  SnowflakePassword:
    Type: String
    Description: Password for the Snowflake account
    NoEcho: true
    MinLength: 5
    
  SnowflakeWarehouse:
    Type: String
    Description: Snowflake warehouse to use

  SnowflakeShareDatabase:
    Type: String
    Description: Database that contains the shared OAG data from the Snowflake Marketplace

  APIPassword:
    Type: String
    Description: Password to allow access to the API
    NoEcho: true
    MinLength: 4

Resources:
# Secret Manager
  SnowflakeSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub ${Prefix}-SnowflakeSecret
      Description: This secret has the credentials for the Snowflake account
      SecretString:
        !Join
          - '' 
          - - '{"user":"'
            - !Ref SnowflakeUser
            - '","password":"'
            - !Ref SnowflakePassword
            - '", "account":"'
            - !Ref SnowflakeAccount
            - '"}'

# IAM
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Policies:
        - PolicyName: SnowflakeSecret
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref SnowflakeSecret
      RoleName: !Sub ${Prefix}-Role-Lambda

  AppSyncDataSourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ExecuteLambdfas
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: 
                  - !GetAtt LambdaFunctionBusyAirports.Arn
                  - !GetAtt LambdaFunctionAirportDaily.Arn
                  - !GetAtt LambdaFunctionAirportDailyCarriers.Arn
                  - !GetAtt LambdaBasicAuthFunction.Arn

      RoleName: !Sub ${Prefix}-Role-AppSync

# Lambda
  LambdaLayerPysnow:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${Prefix}-Layer-pysnow
      Description: Layer for Snowflake Python Connector
      ContentUri: layer-pysnowpark
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: python3.8

  LambdaFunctionBusyAirports: 
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Prefix}-snowfunc-busy-airports
      CodeUri: snow_graphql
      Handler: app.lambda_handler_busy_airports
      Layers:
        - !Ref LambdaLayerPysnow
      Runtime: python3.8
      Environment:
        Variables:
          DB_SECRET_NAME: !Sub ${Prefix}-SnowflakeSecret
          DB_WAREHOUSE: !Ref SnowflakeWarehouse
          SNOW_TABLE: !Sub ${SnowflakeShareDatabase}.PUBLIC.OAG_SCHEDULE
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256

  LambdaFunctionAirportDaily: 
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Prefix}-snowfunc-airport-daily
      CodeUri: snow_graphql
      Handler: app.lambda_handler_airport_daily
      Layers:
        - !Ref LambdaLayerPysnow
      Runtime: python3.8
      Environment:
        Variables:
          DB_SECRET_NAME: !Sub ${Prefix}-SnowflakeSecret
          DB_WAREHOUSE: !Ref SnowflakeWarehouse
          SNOW_TABLE: !Sub ${SnowflakeShareDatabase}.PUBLIC.OAG_SCHEDULE
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256

  LambdaFunctionAirportDailyCarriers: 
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Prefix}-snowfunc-airport-daily-carriers
      CodeUri: snow_graphql
      Handler: app.lambda_handler_airport_daily_carriers
      Layers:
        - !Ref LambdaLayerPysnow
      Runtime: python3.8
      Environment:
        Variables:
          DB_SECRET_NAME: !Sub ${Prefix}-SnowflakeSecret
          DB_WAREHOUSE: !Ref SnowflakeWarehouse
          SNOW_TABLE: !Sub ${SnowflakeShareDatabase}.PUBLIC.OAG_SCHEDULE
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256

  LambdaBasicAuthFunction: 
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Prefix}-BasicAuth
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Environment:
        Variables:
          PASSWORD: !Ref APIPassword
      Timeout: 5
      Code: 
        ZipFile: |
          import os

          def lambda_handler(event, context):
              authToken = event["authorizationToken"]
              retval = False
              if (authToken == os.environ["PASSWORD"]):
                  retval = True
              return {"isAuthorized": retval}

  LambdaPermissionAPIBusyAirports:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunctionBusyAirports.Arn
      Action: lambda:InvokeFunction
      Principal: appsync.amazonaws.com

  LambdaPermissionAPIAirportDaily:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunctionAirportDaily.Arn
      Action: lambda:InvokeFunction
      Principal: appsync.amazonaws.com

  LambdaPermissionAPIAirportDailyCarriers:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunctionAirportDailyCarriers.Arn
      Action: lambda:InvokeFunction
      Principal: appsync.amazonaws.com

  LambdaPermissionAPIBasicAuth:
    DependsOn: LambdaBasicAuthFunction
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaBasicAuthFunction.Arn
      Action: lambda:InvokeFunction
      Principal: appsync.amazonaws.com

# AppSync
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: AppSync Snowflake Example
      AuthenticationType: AWS_LAMBDA
      LambdaAuthorizerConfig:
        AuthorizerUri: !GetAtt LambdaBasicAuthFunction.Arn

  DataSourceBusyAirports:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: BusyAirports
      Description: Busy Airports Data Source
      Type: "AWS_LAMBDA"
      ServiceRoleArn: !GetAtt AppSyncDataSourceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt LambdaFunctionBusyAirports.Arn

  DataSourceAirportDaily:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: AirportDaily
      Description: Airport Daily Data Source
      Type: "AWS_LAMBDA"
      ServiceRoleArn: !GetAtt AppSyncDataSourceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt LambdaFunctionAirportDaily.Arn

  DataSourceAirportDailyCarriers:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: AirportDailyCarriers
      Description: Airport Daily Carriers Data Source
      Type: "AWS_LAMBDA"
      ServiceRoleArn: !GetAtt AppSyncDataSourceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt LambdaFunctionAirportDailyCarriers.Arn

  ResolverBusyAirports:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: busyAirports
      DataSourceName: !GetAtt DataSourceBusyAirports.Name

  ResolverAirportDaily:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: airportDaily
      DataSourceName: !GetAtt DataSourceAirportDaily.Name

  ResolverAirportDailyCarriers:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: airportDailyCarriers
      DataSourceName: !GetAtt DataSourceAirportDailyCarriers.Name

  ResolverBusyAirportsDailies:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: BusyAirports
      FieldName: dailies
      DataSourceName: !GetAtt DataSourceAirportDaily.Name
      RequestMappingTemplate: |
        #set($newargs = {'airport': $context.source.APT})
        #foreach($k in $context.arguments.entrySet())
          $!{newargs.put($k.key, $k.value)}
        #end
        {
          "version" : "2017-02-28",
            "operation": "Invoke",
            "payload": {
              "arguments": $util.toJson($newargs),
              "info": $util.toJson($context.info),
                "context": $util.toJson($context)
          }
        }

  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Definition: |
        type AirportDaily {
          FLIGHT_DATE: AWSDate
          DEPCT: Int
          ARRCT: Int
        }

        type AirportDailyCarriers {
          FLIGHT_DATE: AWSDate
          CARRIER: String
          CT: Int
        }

        type BusyAirports {
          APT: String
          CT: Int
          dailies(begin: String, end: String): [AirportDaily!]
        }

        type Query {
          busyAirports(
            begin: String,
            end: String,
            deparr: String,
            nrows: Int
          ): [BusyAirports]!
          airportDaily(
            airport: String!, 
            begin: String, 
            end: String
          ): [AirportDaily]!
          airportDailyCarriers(
            airport: String!,
            begin: String,
            end: String,
            deparr: String
          ): [AirportDailyCarriers]!
        }

        schema {
          query: Query
        }

Outputs:
  GraphQLApiARN:
    Description: The App ID of the GraphQL endpoint.
    Value: !Ref GraphQLApi
  GraphQLApiId:
    Description: The App ID of the GraphQL endpoint.
    Value: !GetAtt GraphQLApi.ApiId
  GraphQLApiEndpoint:
    Description: The URL for the GraphQL endpoint.
    Value: !GetAtt GraphQLApi.GraphQLUrl
